var documenterSearchIndex = {"docs":
[{"location":"guide/contributing/#Contributing","page":"-","title":"Contributing","text":"","category":"section"},{"location":"guide/contributing/","page":"-","title":"-","text":"Contributions are welcome! To contribute:","category":"page"},{"location":"guide/contributing/","page":"-","title":"-","text":"Fork the repository.\nCreate a new branch for your feature or bugfix.\nSubmit a pull request.","category":"page"},{"location":"guide/api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"guide/api/","page":"API","title":"API","text":"Modules = [PowerMonitor]","category":"page"},{"location":"guide/api/#Main.PowerMonitor.CPUPowerMonitor","page":"API","title":"Main.PowerMonitor.CPUPowerMonitor","text":"Structure to monitor CPU power consumption using RAPL (Running Average Power Limit).\n\nFields:\n\nprev_energy::Float64: Energy consumption at the previous measurement (in joules).\nprev_time::Float64: Time of the previous measurement (in seconds).\ninitialized::Bool: Whether the monitor has been initialized.\n\nConstructor:\n\nCreates a new CPUPowerMonitor instance with default values.\n\nExample:\n\nmonitor = CPUPowerMonitor()\nprintln(monitor.initialized)  # false\n\n\n\n\n\n","category":"type"},{"location":"guide/api/#Main.PowerMonitor.PowerData","page":"API","title":"Main.PowerMonitor.PowerData","text":"Structure to store power monitoring data.\n\nFields:\n\ntime::Vector{Float64}: Time points (in seconds) when measurements were taken.\ngpu_power::Vector{Float64}: GPU power consumption values (in watts).\ncpu_power::Vector{Float64}: CPU power consumption values (in watts).\n\nExample:\n\ndata = PowerData([0.1, 0.2], [50.0, 52.0], [10.0, 12.0])\nprintln(data.gpu_power)  # [50.0, 52.0]\n\n\n\n\n\n","category":"type"},{"location":"guide/api/#Main.PowerMonitor.init_gpu_monitor-Tuple{}","page":"API","title":"Main.PowerMonitor.init_gpu_monitor","text":"Initializes GPU power monitoring by ensuring CUDA and NVML are available.\n\nThrows:\n\nAn error if CUDA is not available.\nAn error if NVML is not available.\n\nExample:\n\ninit_gpu_monitor()\nprintln(\"GPU monitoring initialized.\")\n\n\n\n\n\n","category":"method"},{"location":"guide/api/#Main.PowerMonitor.log_power_data-Tuple{String, Main.PowerMonitor.PowerData}","page":"API","title":"Main.PowerMonitor.log_power_data","text":"Logs power data to a CSV file.\n\nParameters:\n\nfile_name::String: Name of the CSV file to save the data.\npower_data::PowerData: The power data to log.\n\nOutput:\n\nThe CSV file contains three columns: Time(s), GPU_Power(W), and CPU_Power(W).\n\nExample:\n\ndata = PowerData([0.1, 0.2], [50.0, 52.0], [10.0, 12.0])\nlog_power_data(\"power_data.csv\", data)\nprintln(\"Power data logged to file.\")\n\n\n\n\n\n","category":"method"},{"location":"guide/api/#Main.PowerMonitor.monitor_power","page":"API","title":"Main.PowerMonitor.monitor_power","text":"Monitors power consumption of the GPU and CPU over a specified duration.\n\nParameters:\n\nduration::Float64: Total duration of monitoring (in seconds).\ninterval::Float64: Sampling interval for power measurements (in seconds, default = 0.001).\n\nReturns:\n\nPowerData: A structure containing time, GPU power, and CPU power data.\n\nExample:\n\ndata = monitor_power(5.0)\nprintln(\"GPU power: \", data.gpu_power)\nprintln(\"CPU power: \", data.cpu_power)\n\n\n\n\n\n","category":"function"},{"location":"guide/api/#Main.PowerMonitor.read_cpu_power-Tuple{Main.PowerMonitor.CPUPowerMonitor}","page":"API","title":"Main.PowerMonitor.read_cpu_power","text":"Reads CPU power consumption using the Linux sysfs interface.\n\nParameters:\n\ncpu_monitor::CPUPowerMonitor: The CPU power monitor state.\n\nReturns:\n\nFloat64: The calculated CPU power consumption (in watts).\n\nThrows:\n\nError if unable to read from the RAPL sysfs interface.\n\nExample:\n\ncpu_monitor = CPUPowerMonitor()\npower = read_cpu_power(cpu_monitor)\nprintln(\"CPU power: \", power)\n\n\n\n\n\n","category":"method"},{"location":"guide/api/#Main.PowerMonitor.terminate_gpu_monitor-Tuple{}","page":"API","title":"Main.PowerMonitor.terminate_gpu_monitor","text":"Placeholder function for GPU power monitoring cleanup. Currently, no explicit cleanup is required.\n\nExample:\n\nterminate_gpu_monitor()\nprintln(\"GPU monitoring terminated.\")\n\n\n\n\n\n","category":"method"},{"location":"guide/api/#Main.PowerMonitor.@monitor_power_block-Tuple{String, Any}","page":"API","title":"Main.PowerMonitor.@monitor_power_block","text":"Monitors power consumption (GPU and CPU) during the execution of a code block.\n\nParameters:\n\nfile_name::String: Name of the CSV file to save the power data.\nblock: The code block to monitor.\n\nUsage:\n\n@monitor_power_block \"output.csv\" begin\n    for i in 1:10^6\n        sqrt(i)\n    end\nend\n\n\n\n\n\n","category":"macro"},{"location":"guide/installation/#PowerMonitor.jl","page":"Installation","title":"PowerMonitor.jl","text":"","category":"section"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"PowerMonitor.jl is a Julia library for monitoring power consumption of CPUs and GPUs. It provides tools to track energy usage, log data to files, and monitor power during code execution.","category":"page"},{"location":"guide/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"Clone the repository:\ngit clone https://github.com/yourusername/PowerMonitor.jl.git\ncd PowerMonitor.jl\nActivate the environment:\nusing Pkg\nPkg.activate(\".\")\nInstall dependencies:\nPkg.instantiate()","category":"page"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"guide/installation/#Documentation","page":"Installation","title":"Documentation","text":"","category":"section"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"The full documentation is available here.","category":"page"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"It includes:","category":"page"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"API reference for all functions, types, and macros.\nExamples demonstrating key features.","category":"page"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"","category":"page"},{"location":"guide/installation/#Requirements","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"guide/installation/","page":"Installation","title":"Installation","text":"Julia 1.6 or higher\nCUDA-enabled NVIDIA GPU\nLinux system with RAPL enabled for CPU power monitoring","category":"page"},{"location":"#PowerMonitor.jl","page":"Home","title":"PowerMonitor.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerMonitor.jl is a Julia library for monitoring power consumption of CPUs and GPUs.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Measure GPU power using NVML.\nMeasure CPU power using the Linux RAPL interface.\nLog power data to CSV files.\nMonitor power usage during code execution with a macro.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the API documentation for details.","category":"page"},{"location":"guide/usage/#Usage","page":"-","title":"Usage","text":"","category":"section"},{"location":"guide/usage/#Basic-Example","page":"-","title":"Basic Example","text":"","category":"section"},{"location":"guide/usage/","page":"-","title":"-","text":"using PowerMonitor\n\n# Monitor power usage for 5 seconds\ndata = monitor_power(5.0)\n\n# Save the data to a CSV file\nlog_power_data(\"power_data.csv\", data)","category":"page"},{"location":"guide/usage/#Monitoring-a-Code-Block","page":"-","title":"Monitoring a Code Block","text":"","category":"section"},{"location":"guide/usage/","page":"-","title":"-","text":"@monitor_power_block \"output.csv\" begin\n    # Your computation here\n    for i in 1:10^7\n        sqrt(i)\n    end\nend","category":"page"}]
}
