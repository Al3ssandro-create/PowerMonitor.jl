var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [PowerMonitor]","category":"page"},{"location":"api/#Main.PowerMonitor.CPUPowerMonitor","page":"API","title":"Main.PowerMonitor.CPUPowerMonitor","text":"Structure to monitor CPU power consumption using RAPL (Running Average Power Limit).\n\nFields:     - prevenergy::Float64: Energy consumption at the previous measurement (in joules).     - prevtime::Float64: Time of the previous measurement (in seconds).     - initialized::Bool: Whether the monitor has been initialized.\n\nConstructor:     CPUPowerMonitor(): Initializes a new monitor with default values.\n\n\n\n\n\n","category":"type"},{"location":"api/#Main.PowerMonitor.init_gpu_monitor-Tuple{}","page":"API","title":"Main.PowerMonitor.init_gpu_monitor","text":"Initializes GPU power monitoring by ensuring CUDA and NVML are available.\n\nThrows an error if CUDA or NVML support is not detected.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.PowerMonitor.log_power_data-Tuple{String, Main.PowerMonitor.PowerData}","page":"API","title":"Main.PowerMonitor.log_power_data","text":"Logs power data to a CSV file.\n\nParameters:     - filename::String: Name of the CSV file to save the data.     - powerdata::PowerData: The power data to log.\n\nThe CSV file contains three columns: Time(s), GPUPower(W), and CPUPower(W).\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.PowerMonitor.monitor_power","page":"API","title":"Main.PowerMonitor.monitor_power","text":"Monitors power consumption of the GPU and CPU over a specified duration.\n\nParameters:     - duration::Float64: Total duration of monitoring (in seconds).     - interval::Float64: Sampling interval for power measurements (in seconds).\n\nReturns:     - PowerData: A structure containing time, GPU power, and CPU power data.\n\n\n\n\n\n","category":"function"},{"location":"api/#Main.PowerMonitor.read_cpu_power-Tuple{Main.PowerMonitor.CPUPowerMonitor}","page":"API","title":"Main.PowerMonitor.read_cpu_power","text":"Reads CPU power consumption using the Linux sysfs interface.\n\nParameters:     - cpu_monitor::CPUPowerMonitor: The CPU power monitor state.\n\nReturns:     - Float64: The calculated CPU power consumption (in watts).\n\nThrows:     - Error: If unable to read from the RAPL sysfs interface.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.PowerMonitor.terminate_gpu_monitor-Tuple{}","page":"API","title":"Main.PowerMonitor.terminate_gpu_monitor","text":"Placeholder function for GPU power monitoring cleanup. Currently, no explicit cleanup is required.\n\n\n\n\n\n","category":"method"},{"location":"api/#Main.PowerMonitor.@monitor_power_block-Tuple{String, Any}","page":"API","title":"Main.PowerMonitor.@monitor_power_block","text":"Monitors power consumption (GPU and CPU) during the execution of a code block.\n\nParameters:     - file_name::String: Name of the CSV file to save the power data.     - block: The code block to monitor.\n\nUsage:     @monitorpowerblock(\"output.csv\") begin         # Your code here     end\n\n\n\n\n\n","category":"macro"},{"location":"#PowerMonitor.jl","page":"Home","title":"PowerMonitor.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerMonitor.jl is a Julia library for monitoring power consumption of CPUs and GPUs.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Measure GPU power using NVML.\nMeasure CPU power using the Linux RAPL interface.\nLog power data to CSV files.\nMonitor power usage during code execution with a macro.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the API documentation for details.","category":"page"}]
}
